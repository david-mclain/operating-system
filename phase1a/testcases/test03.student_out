phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using fork1() to create it.
testcase_main(): started
EXPECTATION: main() creates many XXp1 children, and join()s all of them; then repeats twice.  Process count is large enough to fill process table - meaning that students must free old process table entries.

*** Start of round 0 of the fork()/join() operations ***
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 4
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 4 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 5
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 5 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 6
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 6 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 7
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 7 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 8
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 8 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 9
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 9 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 10
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 10 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 11
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 11 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 12
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 12 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 13
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 13 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 14
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 14 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 15
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 15 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 16
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 16 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 17
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 17 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 18
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 18 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 19
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 19 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 20
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 20 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 21
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 21 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 22
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 22 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 23
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 23 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 24
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 24 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 25
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 25 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 26
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 26 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 27
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 27 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 28
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 28 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 29
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 29 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 30
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 30 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 31
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 31 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 32
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 32 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 33
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 33 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 34
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 34 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 35
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 35 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 36
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 36 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 37
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 37 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 38
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 38 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 39
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 39 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 40
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 40 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 41
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 41 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 42
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 42 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 43
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 43 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 44
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 44 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 45
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 45 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.

**************** Calling dumpProcesses() *******************
Process Name: init
Process ID:   1
Child PID:    3
Priority:     6
Runnable:     0
Process Name: sentinel
Process ID:   2
Parent PID:   1
Priority:     3
Runnable:     0
Process Name: testcase_main
Process ID:   3
Parent PID:   1
Child PID:    45
Priority:     3
Runnable:     0
Process Name: XXp1
Process ID:   4
Parent PID:   3
Priority:     2
Runnable:     4
Process Name: XXp1
Process ID:   5
Parent PID:   3
Priority:     2
Runnable:     5
Process Name: XXp1
Process ID:   6
Parent PID:   3
Priority:     2
Runnable:     6
Process Name: XXp1
Process ID:   7
Parent PID:   3
Priority:     2
Runnable:     7
Process Name: XXp1
Process ID:   8
Parent PID:   3
Priority:     2
Runnable:     8
Process Name: XXp1
Process ID:   9
Parent PID:   3
Priority:     2
Runnable:     9
Process Name: XXp1
Process ID:   10
Parent PID:   3
Priority:     2
Runnable:     10
Process Name: XXp1
Process ID:   11
Parent PID:   3
Priority:     2
Runnable:     11
Process Name: XXp1
Process ID:   12
Parent PID:   3
Priority:     2
Runnable:     12
Process Name: XXp1
Process ID:   13
Parent PID:   3
Priority:     2
Runnable:     13
Process Name: XXp1
Process ID:   14
Parent PID:   3
Priority:     2
Runnable:     14
Process Name: XXp1
Process ID:   15
Parent PID:   3
Priority:     2
Runnable:     15
Process Name: XXp1
Process ID:   16
Parent PID:   3
Priority:     2
Runnable:     16
Process Name: XXp1
Process ID:   17
Parent PID:   3
Priority:     2
Runnable:     17
Process Name: XXp1
Process ID:   18
Parent PID:   3
Priority:     2
Runnable:     18
Process Name: XXp1
Process ID:   19
Parent PID:   3
Priority:     2
Runnable:     19
Process Name: XXp1
Process ID:   20
Parent PID:   3
Priority:     2
Runnable:     20
Process Name: XXp1
Process ID:   21
Parent PID:   3
Priority:     2
Runnable:     21
Process Name: XXp1
Process ID:   22
Parent PID:   3
Priority:     2
Runnable:     22
Process Name: XXp1
Process ID:   23
Parent PID:   3
Priority:     2
Runnable:     23
Process Name: XXp1
Process ID:   24
Parent PID:   3
Priority:     2
Runnable:     24
Process Name: XXp1
Process ID:   25
Parent PID:   3
Priority:     2
Runnable:     25
Process Name: XXp1
Process ID:   26
Parent PID:   3
Priority:     2
Runnable:     26
Process Name: XXp1
Process ID:   27
Parent PID:   3
Priority:     2
Runnable:     27
Process Name: XXp1
Process ID:   28
Parent PID:   3
Priority:     2
Runnable:     28
Process Name: XXp1
Process ID:   29
Parent PID:   3
Priority:     2
Runnable:     29
Process Name: XXp1
Process ID:   30
Parent PID:   3
Priority:     2
Runnable:     30
Process Name: XXp1
Process ID:   31
Parent PID:   3
Priority:     2
Runnable:     31
Process Name: XXp1
Process ID:   32
Parent PID:   3
Priority:     2
Runnable:     32
Process Name: XXp1
Process ID:   33
Parent PID:   3
Priority:     2
Runnable:     33
Process Name: XXp1
Process ID:   34
Parent PID:   3
Priority:     2
Runnable:     34
Process Name: XXp1
Process ID:   35
Parent PID:   3
Priority:     2
Runnable:     35
Process Name: XXp1
Process ID:   36
Parent PID:   3
Priority:     2
Runnable:     36
Process Name: XXp1
Process ID:   37
Parent PID:   3
Priority:     2
Runnable:     37
Process Name: XXp1
Process ID:   38
Parent PID:   3
Priority:     2
Runnable:     38
Process Name: XXp1
Process ID:   39
Parent PID:   3
Priority:     2
Runnable:     39
Process Name: XXp1
Process ID:   40
Parent PID:   3
Priority:     2
Runnable:     40
Process Name: XXp1
Process ID:   41
Parent PID:   3
Priority:     2
Runnable:     41
Process Name: XXp1
Process ID:   42
Parent PID:   3
Priority:     2
Runnable:     42
Process Name: XXp1
Process ID:   43
Parent PID:   3
Priority:     2
Runnable:     43
Process Name: XXp1
Process ID:   44
Parent PID:   3
Priority:     2
Runnable:     44
Process Name: XXp1
Process ID:   45
Parent PID:   3
Priority:     2
Runnable:     45
**************** end dumpProcesses() *******************

testcase_main(): after join of child 45, status = 45
testcase_main(): after join of child 44, status = 44
testcase_main(): after join of child 43, status = 43
testcase_main(): after join of child 42, status = 42
testcase_main(): after join of child 41, status = 41
testcase_main(): after join of child 40, status = 40
testcase_main(): after join of child 39, status = 39
testcase_main(): after join of child 38, status = 38
testcase_main(): after join of child 37, status = 37
testcase_main(): after join of child 36, status = 36
testcase_main(): after join of child 35, status = 35
testcase_main(): after join of child 34, status = 34
testcase_main(): after join of child 33, status = 33
testcase_main(): after join of child 32, status = 32
testcase_main(): after join of child 31, status = 31
testcase_main(): after join of child 30, status = 30
testcase_main(): after join of child 29, status = 29
testcase_main(): after join of child 28, status = 28
testcase_main(): after join of child 27, status = 27
testcase_main(): after join of child 26, status = 26
testcase_main(): after join of child 25, status = 25
testcase_main(): after join of child 24, status = 24
testcase_main(): after join of child 23, status = 23
testcase_main(): after join of child 22, status = 22
testcase_main(): after join of child 21, status = 21
testcase_main(): after join of child 20, status = 20
testcase_main(): after join of child 19, status = 19
testcase_main(): after join of child 18, status = 18
testcase_main(): after join of child 17, status = 17
testcase_main(): after join of child 16, status = 16
testcase_main(): after join of child 15, status = 15
testcase_main(): after join of child 14, status = 14
testcase_main(): after join of child 13, status = 13
testcase_main(): after join of child 12, status = 12
testcase_main(): after join of child 11, status = 11
testcase_main(): after join of child 10, status = 10
testcase_main(): after join of child 9, status = 9
testcase_main(): after join of child 8, status = 8
testcase_main(): after join of child 7, status = 7
testcase_main(): after join of child 6, status = 6
testcase_main(): after join of child 5, status = 5
testcase_main(): after join of child 4, status = 4

*** Start of round 1 of the fork()/join() operations ***
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 45
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 45 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 46
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 46 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 47
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 47 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 48
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 48 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 49
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 49 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 50
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 50 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 54
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 54 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 55
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 55 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 56
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 56 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 57
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 57 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 58
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 58 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 59
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 59 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 60
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 60 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 61
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 61 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 62
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 62 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 63
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 63 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 64
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 64 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 65
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 65 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 66
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 66 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 67
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 67 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 68
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 68 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 69
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 69 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 70
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 70 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 71
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 71 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 72
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 72 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 73
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 73 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 74
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 74 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 75
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 75 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 76
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 76 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 77
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 77 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 78
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 78 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 79
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 79 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 80
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 80 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 81
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 81 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 82
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 82 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 83
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 83 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 84
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 84 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 85
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 85 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 86
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 86 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 87
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 87 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 88
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 88 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 89
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 89 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.

**************** Calling dumpProcesses() *******************
Process Name: XXp1
Process ID:   50
Parent PID:   3
Priority:     2
Runnable:     50
Process Name: init
Process ID:   1
Child PID:    3
Priority:     6
Runnable:     0
Process Name: sentinel
Process ID:   2
Parent PID:   1
Priority:     3
Runnable:     0
Process Name: testcase_main
Process ID:   3
Parent PID:   1
Child PID:    89
Priority:     3
Runnable:     0
Process Name: XXp1
Process ID:   54
Parent PID:   3
Priority:     2
Runnable:     54
Process Name: XXp1
Process ID:   55
Parent PID:   3
Priority:     2
Runnable:     55
Process Name: XXp1
Process ID:   56
Parent PID:   3
Priority:     2
Runnable:     56
Process Name: XXp1
Process ID:   57
Parent PID:   3
Priority:     2
Runnable:     57
Process Name: XXp1
Process ID:   58
Parent PID:   3
Priority:     2
Runnable:     58
Process Name: XXp1
Process ID:   59
Parent PID:   3
Priority:     2
Runnable:     59
Process Name: XXp1
Process ID:   60
Parent PID:   3
Priority:     2
Runnable:     60
Process Name: XXp1
Process ID:   61
Parent PID:   3
Priority:     2
Runnable:     61
Process Name: XXp1
Process ID:   62
Parent PID:   3
Priority:     2
Runnable:     62
Process Name: XXp1
Process ID:   63
Parent PID:   3
Priority:     2
Runnable:     63
Process Name: XXp1
Process ID:   64
Parent PID:   3
Priority:     2
Runnable:     64
Process Name: XXp1
Process ID:   65
Parent PID:   3
Priority:     2
Runnable:     65
Process Name: XXp1
Process ID:   66
Parent PID:   3
Priority:     2
Runnable:     66
Process Name: XXp1
Process ID:   67
Parent PID:   3
Priority:     2
Runnable:     67
Process Name: XXp1
Process ID:   68
Parent PID:   3
Priority:     2
Runnable:     68
Process Name: XXp1
Process ID:   69
Parent PID:   3
Priority:     2
Runnable:     69
Process Name: XXp1
Process ID:   70
Parent PID:   3
Priority:     2
Runnable:     70
Process Name: XXp1
Process ID:   71
Parent PID:   3
Priority:     2
Runnable:     71
Process Name: XXp1
Process ID:   72
Parent PID:   3
Priority:     2
Runnable:     72
Process Name: XXp1
Process ID:   73
Parent PID:   3
Priority:     2
Runnable:     73
Process Name: XXp1
Process ID:   74
Parent PID:   3
Priority:     2
Runnable:     74
Process Name: XXp1
Process ID:   75
Parent PID:   3
Priority:     2
Runnable:     75
Process Name: XXp1
Process ID:   76
Parent PID:   3
Priority:     2
Runnable:     76
Process Name: XXp1
Process ID:   77
Parent PID:   3
Priority:     2
Runnable:     77
Process Name: XXp1
Process ID:   78
Parent PID:   3
Priority:     2
Runnable:     78
Process Name: XXp1
Process ID:   79
Parent PID:   3
Priority:     2
Runnable:     79
Process Name: XXp1
Process ID:   80
Parent PID:   3
Priority:     2
Runnable:     80
Process Name: XXp1
Process ID:   81
Parent PID:   3
Priority:     2
Runnable:     81
Process Name: XXp1
Process ID:   82
Parent PID:   3
Priority:     2
Runnable:     82
Process Name: XXp1
Process ID:   83
Parent PID:   3
Priority:     2
Runnable:     83
Process Name: XXp1
Process ID:   84
Parent PID:   3
Priority:     2
Runnable:     84
Process Name: XXp1
Process ID:   85
Parent PID:   3
Priority:     2
Runnable:     85
Process Name: XXp1
Process ID:   86
Parent PID:   3
Priority:     2
Runnable:     86
Process Name: XXp1
Process ID:   87
Parent PID:   3
Priority:     2
Runnable:     87
Process Name: XXp1
Process ID:   88
Parent PID:   3
Priority:     2
Runnable:     88
Process Name: XXp1
Process ID:   89
Parent PID:   3
Priority:     2
Runnable:     89
Process Name: XXp1
Process ID:   45
Parent PID:   3
Priority:     2
Runnable:     45
Process Name: XXp1
Process ID:   46
Parent PID:   3
Priority:     2
Runnable:     46
Process Name: XXp1
Process ID:   47
Parent PID:   3
Priority:     2
Runnable:     47
Process Name: XXp1
Process ID:   48
Parent PID:   3
Priority:     2
Runnable:     48
Process Name: XXp1
Process ID:   49
Parent PID:   3
Priority:     2
Runnable:     49
**************** end dumpProcesses() *******************

testcase_main(): after join of child 89, status = 89
testcase_main(): after join of child 88, status = 88
testcase_main(): after join of child 87, status = 87
testcase_main(): after join of child 86, status = 86
testcase_main(): after join of child 85, status = 85
testcase_main(): after join of child 84, status = 84
testcase_main(): after join of child 83, status = 83
testcase_main(): after join of child 82, status = 82
testcase_main(): after join of child 81, status = 81
testcase_main(): after join of child 80, status = 80
testcase_main(): after join of child 79, status = 79
testcase_main(): after join of child 78, status = 78
testcase_main(): after join of child 77, status = 77
testcase_main(): after join of child 76, status = 76
testcase_main(): after join of child 75, status = 75
testcase_main(): after join of child 74, status = 74
testcase_main(): after join of child 73, status = 73
testcase_main(): after join of child 72, status = 72
testcase_main(): after join of child 71, status = 71
testcase_main(): after join of child 70, status = 70
testcase_main(): after join of child 69, status = 69
testcase_main(): after join of child 68, status = 68
testcase_main(): after join of child 67, status = 67
testcase_main(): after join of child 66, status = 66
testcase_main(): after join of child 65, status = 65
testcase_main(): after join of child 64, status = 64
testcase_main(): after join of child 63, status = 63
testcase_main(): after join of child 62, status = 62
testcase_main(): after join of child 61, status = 61
testcase_main(): after join of child 60, status = 60
testcase_main(): after join of child 59, status = 59
testcase_main(): after join of child 58, status = 58
testcase_main(): after join of child 57, status = 57
testcase_main(): after join of child 56, status = 56
testcase_main(): after join of child 55, status = 55
testcase_main(): after join of child 54, status = 54
testcase_main(): after join of child 50, status = 50
testcase_main(): after join of child 49, status = 49
testcase_main(): after join of child 48, status = 48
testcase_main(): after join of child 47, status = 47
testcase_main(): after join of child 46, status = 46
testcase_main(): after join of child 45, status = 45

*** Start of round 2 of the fork()/join() operations ***
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 89
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 89 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 90
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 90 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 91
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 91 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 92
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 92 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 93
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 93 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 94
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 94 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 95
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 95 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 96
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 96 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 97
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 97 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 98
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 98 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 99
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 99 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 100
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 100 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 104
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 104 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 105
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 105 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 106
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 106 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 107
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 107 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 108
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 108 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 109
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 109 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 110
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 110 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 111
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 111 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 112
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 112 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 113
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 113 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 114
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 114 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 115
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 115 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 116
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 116 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 117
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 117 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 118
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 118 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 119
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 119 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 120
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 120 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 121
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 121 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 122
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 122 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 123
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 123 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 124
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 124 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 125
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 125 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 126
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 126 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 127
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 127 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 128
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 128 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 129
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 129 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 130
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 130 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 131
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 131 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 132
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 132 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 133
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 133 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.

**************** Calling dumpProcesses() *******************
Process Name: XXp1
Process ID:   100
Parent PID:   3
Priority:     2
Runnable:     100
Process Name: init
Process ID:   1
Child PID:    3
Priority:     6
Runnable:     0
Process Name: sentinel
Process ID:   2
Parent PID:   1
Priority:     3
Runnable:     0
Process Name: testcase_main
Process ID:   3
Parent PID:   1
Child PID:    133
Priority:     3
Runnable:     0
Process Name: XXp1
Process ID:   104
Parent PID:   3
Priority:     2
Runnable:     104
Process Name: XXp1
Process ID:   105
Parent PID:   3
Priority:     2
Runnable:     105
Process Name: XXp1
Process ID:   106
Parent PID:   3
Priority:     2
Runnable:     106
Process Name: XXp1
Process ID:   107
Parent PID:   3
Priority:     2
Runnable:     107
Process Name: XXp1
Process ID:   108
Parent PID:   3
Priority:     2
Runnable:     108
Process Name: XXp1
Process ID:   109
Parent PID:   3
Priority:     2
Runnable:     109
Process Name: XXp1
Process ID:   110
Parent PID:   3
Priority:     2
Runnable:     110
Process Name: XXp1
Process ID:   111
Parent PID:   3
Priority:     2
Runnable:     111
Process Name: XXp1
Process ID:   112
Parent PID:   3
Priority:     2
Runnable:     112
Process Name: XXp1
Process ID:   113
Parent PID:   3
Priority:     2
Runnable:     113
Process Name: XXp1
Process ID:   114
Parent PID:   3
Priority:     2
Runnable:     114
Process Name: XXp1
Process ID:   115
Parent PID:   3
Priority:     2
Runnable:     115
Process Name: XXp1
Process ID:   116
Parent PID:   3
Priority:     2
Runnable:     116
Process Name: XXp1
Process ID:   117
Parent PID:   3
Priority:     2
Runnable:     117
Process Name: XXp1
Process ID:   118
Parent PID:   3
Priority:     2
Runnable:     118
Process Name: XXp1
Process ID:   119
Parent PID:   3
Priority:     2
Runnable:     119
Process Name: XXp1
Process ID:   120
Parent PID:   3
Priority:     2
Runnable:     120
Process Name: XXp1
Process ID:   121
Parent PID:   3
Priority:     2
Runnable:     121
Process Name: XXp1
Process ID:   122
Parent PID:   3
Priority:     2
Runnable:     122
Process Name: XXp1
Process ID:   123
Parent PID:   3
Priority:     2
Runnable:     123
Process Name: XXp1
Process ID:   124
Parent PID:   3
Priority:     2
Runnable:     124
Process Name: XXp1
Process ID:   125
Parent PID:   3
Priority:     2
Runnable:     125
Process Name: XXp1
Process ID:   126
Parent PID:   3
Priority:     2
Runnable:     126
Process Name: XXp1
Process ID:   127
Parent PID:   3
Priority:     2
Runnable:     127
Process Name: XXp1
Process ID:   128
Parent PID:   3
Priority:     2
Runnable:     128
Process Name: XXp1
Process ID:   129
Parent PID:   3
Priority:     2
Runnable:     129
Process Name: XXp1
Process ID:   130
Parent PID:   3
Priority:     2
Runnable:     130
Process Name: XXp1
Process ID:   131
Parent PID:   3
Priority:     2
Runnable:     131
Process Name: XXp1
Process ID:   132
Parent PID:   3
Priority:     2
Runnable:     132
Process Name: XXp1
Process ID:   133
Parent PID:   3
Priority:     2
Runnable:     133
Process Name: XXp1
Process ID:   89
Parent PID:   3
Priority:     2
Runnable:     89
Process Name: XXp1
Process ID:   90
Parent PID:   3
Priority:     2
Runnable:     90
Process Name: XXp1
Process ID:   91
Parent PID:   3
Priority:     2
Runnable:     91
Process Name: XXp1
Process ID:   92
Parent PID:   3
Priority:     2
Runnable:     92
Process Name: XXp1
Process ID:   93
Parent PID:   3
Priority:     2
Runnable:     93
Process Name: XXp1
Process ID:   94
Parent PID:   3
Priority:     2
Runnable:     94
Process Name: XXp1
Process ID:   95
Parent PID:   3
Priority:     2
Runnable:     95
Process Name: XXp1
Process ID:   96
Parent PID:   3
Priority:     2
Runnable:     96
Process Name: XXp1
Process ID:   97
Parent PID:   3
Priority:     2
Runnable:     97
Process Name: XXp1
Process ID:   98
Parent PID:   3
Priority:     2
Runnable:     98
Process Name: XXp1
Process ID:   99
Parent PID:   3
Priority:     2
Runnable:     99
**************** end dumpProcesses() *******************

testcase_main(): after join of child 133, status = 133
testcase_main(): after join of child 132, status = 132
testcase_main(): after join of child 131, status = 131
testcase_main(): after join of child 130, status = 130
testcase_main(): after join of child 129, status = 129
testcase_main(): after join of child 128, status = 128
testcase_main(): after join of child 127, status = 127
testcase_main(): after join of child 126, status = 126
testcase_main(): after join of child 125, status = 125
testcase_main(): after join of child 124, status = 124
testcase_main(): after join of child 123, status = 123
testcase_main(): after join of child 122, status = 122
testcase_main(): after join of child 121, status = 121
testcase_main(): after join of child 120, status = 120
testcase_main(): after join of child 119, status = 119
testcase_main(): after join of child 118, status = 118
testcase_main(): after join of child 117, status = 117
testcase_main(): after join of child 116, status = 116
testcase_main(): after join of child 115, status = 115
testcase_main(): after join of child 114, status = 114
testcase_main(): after join of child 113, status = 113
testcase_main(): after join of child 112, status = 112
testcase_main(): after join of child 111, status = 111
testcase_main(): after join of child 110, status = 110
testcase_main(): after join of child 109, status = 109
testcase_main(): after join of child 108, status = 108
testcase_main(): after join of child 107, status = 107
testcase_main(): after join of child 106, status = 106
testcase_main(): after join of child 105, status = 105
testcase_main(): after join of child 104, status = 104
testcase_main(): after join of child 100, status = 100
testcase_main(): after join of child 99, status = 99
testcase_main(): after join of child 98, status = 98
testcase_main(): after join of child 97, status = 97
testcase_main(): after join of child 96, status = 96
testcase_main(): after join of child 95, status = 95
testcase_main(): after join of child 94, status = 94
testcase_main(): after join of child 93, status = 93
testcase_main(): after join of child 92, status = 92
testcase_main(): after join of child 91, status = 91
testcase_main(): after join of child 90, status = 90
testcase_main(): after join of child 89, status = 89
Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
TESTCASE ENDED: Call counts:   check_io() 0   clockHandler() 0

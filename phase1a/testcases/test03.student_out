phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
testcase_main(): started
EXPECTATION: main() creates many XXp1 children, and join()s all of them; then repeats twice.  Process count is large enough to fill process table - meaning that students must free old process table entries.

*** Start of round 0 of the fork()/join() operations ***
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 4
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 4 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 5
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 5 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 6
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 6 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 7
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 7 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 8
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 8 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 9
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 9 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 10
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 10 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 11
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 11 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 12
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 12 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 13
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 13 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 14
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 14 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 15
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 15 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 16
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 16 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 17
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 17 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 18
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 18 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 19
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 19 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 20
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 20 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 21
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 21 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 22
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 22 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 23
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 23 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 24
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 24 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 25
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 25 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 26
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 26 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 27
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 27 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 28
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 28 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 29
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 29 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 30
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 30 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 31
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 31 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 32
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 32 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 33
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 33 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 34
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 34 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 35
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 35 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 36
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 36 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 37
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 37 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 38
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 38 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 39
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 39 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 40
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 40 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 41
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 41 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 42
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 42 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 43
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 43 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 44
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 44 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started, pid = 45
XXp1(): arg = 'XXp1'
XXp1(): this process will terminate immediately.
testcase_main(): after fork of child 45 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these fork messages.

**************** Calling dumpProcesses() *******************
Process Name: init
Process ID:   1
Priority:     6
Runnable:     0
Process Name: sentinel
Process ID:   2
Parent PID:   1
Priority:     7
Runnable:     0
Process Name: testcase_main
Process ID:   3
Parent PID:   1
Child PID:    45
Priority:     3
Runnable:     0
Process Name: XXp1
Process ID:   4
Parent PID:   3
Priority:     2
Runnable:     4
Process Name: XXp1
Process ID:   5
Parent PID:   3
Priority:     2
Runnable:     5
Process Name: XXp1
Process ID:   6
Parent PID:   3
Priority:     2
Runnable:     6
Process Name: XXp1
Process ID:   7
Parent PID:   3
Priority:     2
Runnable:     7
Process Name: XXp1
Process ID:   8
Parent PID:   3
Priority:     2
Runnable:     8
Process Name: XXp1
Process ID:   9
Parent PID:   3
Priority:     2
Runnable:     9
Process Name: XXp1
Process ID:   10
Parent PID:   3
Priority:     2
Runnable:     10
Process Name: XXp1
Process ID:   11
Parent PID:   3
Priority:     2
Runnable:     11
Process Name: XXp1
Process ID:   12
Parent PID:   3
Priority:     2
Runnable:     12
Process Name: XXp1
Process ID:   13
Parent PID:   3
Priority:     2
Runnable:     13
Process Name: XXp1
Process ID:   14
Parent PID:   3
Priority:     2
Runnable:     14
Process Name: XXp1
Process ID:   15
Parent PID:   3
Priority:     2
Runnable:     15
Process Name: XXp1
Process ID:   16
Parent PID:   3
Priority:     2
Runnable:     16
Process Name: XXp1
Process ID:   17
Parent PID:   3
Priority:     2
Runnable:     17
Process Name: XXp1
Process ID:   18
Parent PID:   3
Priority:     2
Runnable:     18
Process Name: XXp1
Process ID:   19
Parent PID:   3
Priority:     2
Runnable:     19
Process Name: XXp1
Process ID:   20
Parent PID:   3
Priority:     2
Runnable:     20
Process Name: XXp1
Process ID:   21
Parent PID:   3
Priority:     2
Runnable:     21
Process Name: XXp1
Process ID:   22
Parent PID:   3
Priority:     2
Runnable:     22
Process Name: XXp1
Process ID:   23
Parent PID:   3
Priority:     2
Runnable:     23
Process Name: XXp1
Process ID:   24
Parent PID:   3
Priority:     2
Runnable:     24
Process Name: XXp1
Process ID:   25
Parent PID:   3
Priority:     2
Runnable:     25
Process Name: XXp1
Process ID:   26
Parent PID:   3
Priority:     2
Runnable:     26
Process Name: XXp1
Process ID:   27
Parent PID:   3
Priority:     2
Runnable:     27
Process Name: XXp1
Process ID:   28
Parent PID:   3
Priority:     2
Runnable:     28
Process Name: XXp1
Process ID:   29
Parent PID:   3
Priority:     2
Runnable:     29
Process Name: XXp1
Process ID:   30
Parent PID:   3
Priority:     2
Runnable:     30
Process Name: XXp1
Process ID:   31
Parent PID:   3
Priority:     2
Runnable:     31
Process Name: XXp1
Process ID:   32
Parent PID:   3
Priority:     2
Runnable:     32
Process Name: XXp1
Process ID:   33
Parent PID:   3
Priority:     2
Runnable:     33
Process Name: XXp1
Process ID:   34
Parent PID:   3
Priority:     2
Runnable:     34
Process Name: XXp1
Process ID:   35
Parent PID:   3
Priority:     2
Runnable:     35
Process Name: XXp1
Process ID:   36
Parent PID:   3
Priority:     2
Runnable:     36
Process Name: XXp1
Process ID:   37
Parent PID:   3
Priority:     2
Runnable:     37
Process Name: XXp1
Process ID:   38
Parent PID:   3
Priority:     2
Runnable:     38
Process Name: XXp1
Process ID:   39
Parent PID:   3
Priority:     2
Runnable:     39
Process Name: XXp1
Process ID:   40
Parent PID:   3
Priority:     2
Runnable:     40
Process Name: XXp1
Process ID:   41
Parent PID:   3
Priority:     2
Runnable:     41
Process Name: XXp1
Process ID:   42
Parent PID:   3
Priority:     2
Runnable:     42
Process Name: XXp1
Process ID:   43
Parent PID:   3
Priority:     2
Runnable:     43
Process Name: XXp1
Process ID:   44
Parent PID:   3
Priority:     2
Runnable:     44
Process Name: XXp1
Process ID:   45
Parent PID:   3
Priority:     2
Runnable:     45
**************** end dumpProcesses() *******************

testcase_main(): after join of child 45, status = 45
double free or corruption (top)
